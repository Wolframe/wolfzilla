-- Objects

TRANSACTION listObjects
BEGIN
	INTO item DO
		SELECT 0 AS "id", 'users' AS "type", 'Users' AS "text",
			'' AS "details", ':/images/users.png' AS icon;
-- here we would like to continue to select into the first level 'item'
-- instead of finishing the one above and creating a dummy empty one here
	INTO item/item DO
		SELECT ID AS "id", 'user' AS "type", login AS "text",
			firstName || ' ' || lastName AS "details",
			':/images/users.png' AS icon FROM User
			ORDER BY ID ASC;
-- here we go out one level, next item
	INTO item DO
		SELECT 10000 AS "id", 'projects' AS "type", 'Projects' AS "text",
			'' AS "details", ':/images/project.png' AS icon;
-- same as above, can select into same 'item/item' substructure here
	INTO item/item DO
		SELECT ID AS "id", 'project' AS "type", name AS "text",
			description AS "details",
			':/images/project.png' AS icon FROM Project;
-- system settings
	INTO item DO
		SELECT 1000000 AS "id", 'settings' AS "type", 'Settings' AS "text",
			'' AS "details", ':/images/settings.png' AS icon;
-- the about/info page (weird, I know)
	INTO item DO
		SELECT 99999999 AS "id", 'info' AS "type", 'Info' AS "text",
			'About Wolfzilla' AS "details", ':/images/bug.png' AS icon;
END

TRANSACTION seeObject
BEGIN
	INTO id DO
		SELECT $(id) AS "_";
	INTO page DO
		SELECT $(type) AS "_";
END

-- User

TRANSACTION listUsers
BEGIN
	INTO user DO
		SELECT ID as "id", login, firstName AS "firstName",
			lastName AS "lastName" FROM User
			ORDER BY ID ASC;
END

TRANSACTION updateUser
BEGIN
	DO UPDATE User SET login = $(login), firstName = $(firstName),
		lastName = $(lastName), email = $(email)
		WHERE ID = $(id);
	DO INSERT OR IGNORE INTO User( login, firstName, lastName, email )
		VALUES( $(login), $(firstName), $(lastName), $(email) );
END

-- KLUDGE: id2 is a hack around multiple value assignment to widgets
TRANSACTION readUser
BEGIN
	INTO . DO
		SELECT ID as "id", ID as "id2", login, firstName AS "firstName",
			lastName AS "lastName", email FROM User
			WHERE ID = $(id)
		UNION
		SELECT $(id), $(id), '', '', '', '' FROM User
			WHERE NOT EXISTS (SELECT ID FROM User WHERE ID=$(id));
END

TRANSACTION deleteUser
BEGIN
	DO DELETE FROM User WHERE ID = $(id);
END

-- Project

TRANSACTION listProjects
BEGIN
	INTO project DO
		SELECT ID as "id", shortcut, name, description FROM Project
			ORDER BY ID ASC;
END

TRANSACTION updateProject
BEGIN
	DO UPDATE Project SET shortcut = $(shortcut), name = $(name),
		description = $(description), ownerID = $(owner/id)
		WHERE ID = $(id);
	DO INSERT OR IGNORE INTO Project( shortcut, name, description, ownerID )
		VALUES( $(shortcut), $(name), $(description), $(owner/id) );
END

-- KLUDGE: id2 is a hack around multiple value assignment to widgets
TRANSACTION readProject
BEGIN
	INTO . DO
		SELECT ID as "id", ID as "id2", ID as "id3",
			shortcut, name, description
			FROM Project
			WHERE ID = $(id)
		UNION
		SELECT $(id), $(id), $(id), '', '', '' FROM Project
			WHERE NOT EXISTS (SELECT ID FROM Project WHERE ID=$(id));
	INTO owner DO
		SELECT User.ID as "id", login FROM Project LEFT JOIN User
			WHERE Project.ownerID = User.ID
			AND Project.ID = $(id);
	INTO component DO
		SELECT Component.ID as "id", Component.name, Component.description
			FROM Component, Project
			WHERE Component.projectID = Project.ID
			AND Project.ID = $(id);
END

TRANSACTION deleteProject
BEGIN
	DO DELETE FROM Project WHERE ID = $(id);
END

-- Component

TRANSACTION updateComponent
BEGIN
	DO UPDATE Component SET name = $(name), description = $(description),
		projectID = $(project/id),
		leadID = $(lead/id), defaultAssigneeID = $(defaultAssignee/id)
		WHERE ID = $(id);
	DO INSERT OR IGNORE INTO Component( name, description, projectID, leadID, defaultAssigneeID )
		VALUES( $(name), $(description), $(project/id), $(lead/id), $(defaultAssignee/id) );

END

TRANSACTION readComponent
BEGIN
	INTO . DO
		SELECT ID as "id", name, description
			FROM Component
			WHERE ID = $(id)
		UNION
		SELECT $(id), '', '' From Component
			WHERE NOT EXISTS (SELECT ID FROM Component WHERE ID=$(id));
	INTO project DO
		SELECT ProjectID AS "id" FROM Component
			WHERE ID = $(id);
	INTO lead DO
		SELECT User.ID as "id", User.login AS "login"
			FROM Component LEFT JOIN User
			WHERE Component.leadID = User.ID
			AND Component.ID = $(id);
	INTO defaultAssignee DO
		SELECT User.ID as "id", User.login AS "login"
			FROM Component LEFT JOIN User
			WHERE Component.defaultAssigneeID = User.ID
			AND Component.ID = $(id);	
END
