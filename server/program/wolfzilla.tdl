-- Objects

TRANSACTION listObjects
BEGIN
	INTO item DO
		SELECT 0 AS "id", 'users' AS "type", 'Users' AS "text",
			'' AS "details", ':/images/users.png' AS icon;
-- here we would like to continue to select into the first level 'item'
-- instead of finishing the one above and creating a dummy empty one here
	INTO item/item DO
		SELECT ID AS "id", 'user' AS "type", login AS "text",
			firstName || ' ' || lastName AS "details",
			':/images/users.png' AS "icon" FROM User
			ORDER BY ID ASC;
-- here we go out one level, next item
	INTO item DO
		SELECT 10000 AS "id", 'projects' AS "type", 'Projects' AS "text",
			'' AS "details", ':/images/project.png' AS icon;
-- same as above, can select into same 'item/item' substructure here
	INTO item/item DO
		SELECT ID AS "id", 'project' AS "type", name AS "text",
			description AS "details",
			':/images/project.png' AS icon FROM Project;
-- issue search page
	INTO item DO
		SELECT 2000000 AS "id", 'issues' AS "type", 'Issues' AS "text",
			'' AS "details", ':/images/bug.png' AS "icon";
-- system settings
	INTO item DO
		SELECT 1000000 AS "id", 'settings' AS "type", 'Settings' AS "text",
			'' AS "details", ':/images/settings.png' AS "icon";
-- the about/info page (weird, I know)
	INTO item DO
		SELECT 99999999 AS "id", 'info' AS "type", 'Info' AS "text",
			'About Wolfzilla' AS "details", ':/images/bug.png' AS "icon";
END

TRANSACTION seeObject
BEGIN
	INTO id DO
		SELECT $(id) AS "_";
	INTO page DO
		SELECT $(type) AS "_";
END

-- User

TRANSACTION listUsers
BEGIN
	INTO user DO
		SELECT 0 AS "id", '-- choose a user --' AS "login",
			'' AS "firstName", '' AS "lastName"
		WHERE $(getNullElem) = '1'
		UNION	
		SELECT ID as "id", login, firstName AS "firstName",
			lastName AS "lastName" FROM User
			ORDER BY ID ASC;
END

TRANSACTION updateUser
BEGIN
	DO UPDATE User SET login = $(login), firstName = $(firstName),
		lastName = $(lastName), email = $(email)
		WHERE $(id) <> '0' AND ID = $(id);
	DO INSERT INTO User( login, firstName, lastName, email )
		SELECT $(login), $(firstName), $(lastName), $(email)
		WHERE $(id) = '0';
END

-- KLUDGE: id2 is a hack around multiple value assignment to widgets
TRANSACTION readUser
BEGIN
	INTO . DO
		SELECT ID as "id", ID as "id2", login, firstName AS "firstName",
			lastName AS "lastName", email FROM User
			WHERE ID = $(id)
		UNION
		SELECT $(id), $(id), '', '', '', '' FROM User
			WHERE NOT EXISTS (SELECT ID FROM User WHERE ID=$(id));
END

TRANSACTION deleteUser
BEGIN
	DO DELETE FROM User WHERE ID = $(id);
END

-- Project

TRANSACTION listProjects
BEGIN
	INTO project DO
		SELECT 0 AS "id", '' AS "shortcut", '-- choose a project --' AS "name",
			'' AS "description"
		WHERE $(getNullElem) = '1'
		UNION
		SELECT ID as "id", shortcut, name, description FROM Project
			ORDER BY ID ASC;
END

TRANSACTION updateProject
BEGIN
	DO UPDATE Project SET shortcut = $(shortcut), name = $(name),
		description = $(description), ownerID = $(owner/id)
		WHERE $(id) <> '10000' AND ID = $(id);
	DO INSERT INTO Project( shortcut, name, description, ownerID )
		SELECT $(shortcut), $(name), $(description), $(owner/id)
		WHERE $(id) = '10000';
END

-- KLUDGE: id2 is a hack around multiple value assignment to widgets
TRANSACTION readProject
BEGIN
	INTO . DO
		SELECT ID as "id", ID as "id2", ID as "id3",
			shortcut, name, description
			FROM Project
			WHERE ID = $(id)
		UNION
		SELECT $(id), $(id), $(id), '', '', '' FROM Project
			WHERE NOT EXISTS (SELECT ID FROM Project WHERE ID=$(id));
	INTO owner DO
		SELECT User.ID as "id", login FROM Project LEFT JOIN User
			WHERE Project.ownerID = User.ID
			AND Project.ID = $(id);
	INTO component DO
		SELECT Component.ID as "id", Component.name, Component.description
			FROM Component, Project
			WHERE Component.projectID = Project.ID
			AND Project.ID = $(id);
END

TRANSACTION deleteProject
BEGIN
	DO DELETE FROM Project WHERE ID = $(id);
END

-- Component

TRANSACTION listComponents
BEGIN
	INTO component DO
		SELECT 0 AS "id", '-- choose a component --' AS "name",
			'' AS "description"
		WHERE $(getNullElem) = '1'
		UNION	
		SELECT ID as "id", name, description FROM Component
			WHERE projectID = $(project/id)
			ORDER BY ID ASC;
END

TRANSACTION updateComponent
BEGIN
	DO UPDATE Component SET name = $(name), description = $(description),
		projectID = $(project/id),
		leadID = $(lead/id), defaultAssigneeID = $(defaultAssignee/id)
		WHERE $(id) <> '0' AND ID = $(id);
	DO INSERT INTO Component( name, description, projectID, leadID, defaultAssigneeID )
		SELECT $(name), $(description), $(project/id), $(lead/id), $(defaultAssignee/id)
		WHERE $(id) = '0';
END

TRANSACTION readComponent
BEGIN
	INTO . DO
		SELECT ID as "id", name, description
			FROM Component
			WHERE ID = $(id)
		UNION
		SELECT $(id), '', '' From Component
			WHERE NOT EXISTS (SELECT ID FROM Component WHERE ID=$(id));
	INTO project DO
		SELECT ProjectID AS "id" FROM Component
			WHERE ID = $(id);
	INTO lead DO
		SELECT User.ID as "id", User.login AS "login"
			FROM Component LEFT JOIN User
			WHERE Component.leadID = User.ID
			AND Component.ID = $(id);
	INTO defaultAssignee DO
		SELECT User.ID as "id", User.login AS "login"
			FROM Component LEFT JOIN User
			WHERE Component.defaultAssigneeID = User.ID
			AND Component.ID = $(id);	
END

TRANSACTION deleteComponent
BEGIN
	DO DELETE FROM Component WHERE ID = $(id);
END

-- IssuePriority

TRANSACTION listIssuePriorities
BEGIN
	INTO priority DO
		SELECT 0 AS "id", '-- choose a priority --' AS "name",
			'' AS "icon"
		WHERE $(getNullElem) = '1'
		UNION	
		SELECT ID as "id", name, icon FROM IssuePriority;
END

-- IssueSeverity

TRANSACTION listIssueSeverities
BEGIN
	INTO severity DO
		SELECT 0 AS "id", '-- choose a severity --' AS "name",
			'' AS "icon"
		WHERE $(getNullElem) = '1'
		UNION	
		SELECT ID AS "id", name, icon FROM IssueSeverity;
END

-- IssueType

TRANSACTION listIssueTypes
BEGIN
	INTO type DO
		SELECT 0 AS "id", '-- choose a type --' AS "name",
			'' AS "icon"
		WHERE $(getNullElem) = '1'
		UNION	
		SELECT ID AS "id", name, icon FROM IssueType;
END

-- IssueStatus

TRANSACTION listIssueStati
BEGIN
	INTO status DO
		SELECT 0 AS "id", '-- choose a state --' AS "name",
			'' AS "icon"
		WHERE $(getNullElem) = '1'
		UNION	
		SELECT ID AS "id", name, icon FROM IssueState;
END

-- IssueResolution

TRANSACTION listIssueResolutions
BEGIN
	INTO resolution DO
		SELECT 0 AS "id", '-- choose a resolution --' AS "name",
			'' AS "icon"
		WHERE $(getNullElem) = '1'
		UNION	
		SELECT ID AS "id", name, icon FROM IssueResolution;
END

-- Issue

-- Component

TRANSACTION listIssues
BEGIN
	INTO issue DO
		SELECT Issue.ID as "id", Project.shortcut || '-' || IssueReference.reference AS "reference",
			title, Issue.description, IssueType.Name as "typeName",
			IssueType.Icon AS "typeIcon",
			IssueSeverity.Name AS "severityName",
			IssueSeverity.Icon AS "severityIcon",
			IssuePriority.Name AS "priorityName"
			FROM IssueReference, Project, Issue
			LEFT JOIN IssueType ON Issue.typeID = IssueType.ID
			LEFT JOIN IssuePriority ON Issue.priorityID = IssuePriority.ID
			LEFT JOIN IssueSeverity ON Issue.severityID = IssueSeverity.ID
			WHERE IssueReference.projectID = $(project/id)
			AND IssueReference.projectID = Project.ID
			AND Issue.referenceID = IssueReference.ID
			AND ( $(status/id) IS NULL OR $(status/id) = '0' OR Issue.stateID = $(status/id) )
			AND ( $(component/id) IS NULL OR $(component/id) = '0' OR Issue.componentID = $(component/id) )
			AND ( $(reporter/id) IS NULL OR $(reporter/id) = '0' OR Issue.reporterID = $(reporter/id) )
			ORDER BY Issue.ID ASC;
END

TRANSACTION updateIssue
BEGIN
	DO UPDATE Issue SET title = $(title), description = $(description),
		stateID = $(state/id), typeID = $(type/id),
		resolutionID = nullif( $(resolution/id), '0' ),
		severityID = $(severity/id), priorityID = $(priority/id),
		componentID = nullif( $(component/id), '0' ),
		lastModDate = CURRENT_TIMESTAMP,
		dueDate = $(dueDate),
		reporterID = nullif( $(reporter/id), '0' ),
		assigneeID = nullif( $(assignee/id), '0' )
		WHERE $(id) <> '0' AND ID = $(id);
	DO SELECT coalesce(max(IssueReference.reference)+1,1) AS "id"
		FROM IssueReference
		WHERE projectID = $(project/id)
		AND $(id) = '0';
	DO INSERT INTO IssueReference( projectID, reference )
		SELECT $(project/id), $1
		WHERE $(id) = '0';
	DO SELECT ID FROM IssueReference
		WHERE projectID = $(project/id)
		AND reference = (SELECT MAX(reference) FROM IssueReference WHERE projectID=$(project/id))
		AND $(id) = '0';
	DO INSERT INTO Issue( title, description, referenceID, stateID, typeID, resolutionID, severityID, priorityID, componentID, creationDate, lastModDate, dueDate, reporterID, assigneeID )
		SELECT $(title), $(description), $1,
		$(state/id), $(type/id), nullif( $(resolution/id), '0' ),
		$(severity/id), $(priority/id),
		nullif( $(component/id), '0' ), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
		$(dueDate), nullif( $(reporter/id), '0' ),
		nullif( $(assignee/id), '0' )
		WHERE $(id) = '0';
END

TRANSACTION readIssue
BEGIN
	DO SELECT Project.shortcut AS "shortcut", coalesce(max(IssueReference.reference)+1,1) AS "id"
		FROM Project
		LEFT JOIN IssueReference
		ON IssueReference.projectID = Project.ID
		WHERE Project.ID = $(project/id);
	INTO . DO
		SELECT Issue.ID as "id", Project.shortcut || '-' || IssueReference.reference AS "reference",
			title, Issue.description AS "description",
			IssueReference.projectID AS "projectID",
			componentID AS "componentID",
			coalesce( typeID, '0' ) AS "typeID",
			coalesce( stateID, '0' ) AS "stateID",
			coalesce( resolutionID, '0' ) AS "resolutionID",
			coalesce( severityID, '0' ) AS "severityID",
			coalesce( priorityID, '0' ) AS "priorityID",
			creationDate AS "creationDate",
			lastModDate AS "lastModDate",
			coalesce( reporterID, '0' ) AS "reporterID",
			coalesce( assigneeID, '0' ) AS "assigneeID"
			FROM Issue, Project, IssueReference
			WHERE Issue.ID = $(id)
			AND IssueReference.projectID = Project.ID
			AND IssueReference.ID = Issue.referenceID
		UNION
		SELECT $(id) AS "id", $1 || '-' || $2 AS "reference",
			'' AS "title", '' AS "description", $(project/id), 0,
			0, 0, 0, 0, 0, '', '', 0, 0
			WHERE NOT EXISTS (SELECT ID FROM Issue WHERE ID=$(id));
END

TRANSACTION deleteIssue
BEGIN
	DO DELETE FROM Issue WHERE ID = $(id);
END
